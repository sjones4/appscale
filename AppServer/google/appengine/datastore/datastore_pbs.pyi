# Stubs for google.appengine.datastore.datastore_pbs (Python 2)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Dict, List, Text
from google.appengine.datastore import datastore_v3_pb2, datastore_v4_pb, entity_v4_pb

MEANING_ATOM_CATEGORY: int
MEANING_URL: int
MEANING_ATOM_TITLE: int
MEANING_ATOM_CONTENT: int
MEANING_ATOM_SUMMARY: int
MEANING_ATOM_AUTHOR: int
MEANING_GD_EMAIL: int
MEANING_GEORSS_POINT: int
MEANING_GD_IM: int
MEANING_GD_PHONENUMBER: int
MEANING_GD_POSTALADDRESS: int
MEANING_PERCENT: int
MEANING_TEXT: int
MEANING_BYTESTRING: int
MEANING_INDEX_ONLY: int
MEANING_PREDEFINED_ENTITY_USER: int
MEANING_PREDEFINED_ENTITY_POINT: int
MEANING_ZLIB: int
URI_MEANING_ZLIB: str
MAX_INDEXED_BLOB_BYTES: int
PROPERTY_NAME_X: str
PROPERTY_NAME_Y: str
PROPERTY_NAME_EMAIL: str
PROPERTY_NAME_AUTH_DOMAIN: str
PROPERTY_NAME_USER_ID: str
PROPERTY_NAME_INTERNAL_ID: str
PROPERTY_NAME_FEDERATED_IDENTITY: str
PROPERTY_NAME_FEDERATED_PROVIDER: str
PROPERTY_NAME_KEY: str
DEFAULT_GAIA_ID: int

def v4_key_to_string(v4_key: datastore_v4_pb.Key) -> str: ...
def is_valid_utf8(s: Text) -> bool: ...
def check_conversion(condition: bool, message: Any) -> None: ...

class InvalidConversionError(Exception): ...

class _EntityConverter:
    def v4_to_v3_reference(self, v4_key: entity_v4_pb.Key, v3_ref: datastore_v3_pb2.Reference) -> None: ...
    def v4_to_v3_references(self, v4_keys: List[entity_v4_pb.Key]) -> List[datastore_v3_pb2.Reference]: ...
    def v3_to_v4_key(self, v3_ref: datastore_v3_pb2.Reference, v4_key:  entity_v4_pb.Key) -> None: ...
    def v3_to_v4_keys(self, v3_refs: List[datastore_v3_pb2.Reference]) -> List[entity_v4_pb.Key]: ...
    def v4_to_v3_entity(self, v4_entity: entity_v4_pb.Entity, v3_entity: datastore_v3_pb2.EntityProto) -> None: ...
    def v3_to_v4_entity(self, v3_entity: datastore_v3_pb2.EntityProto, v4_entity: entity_v4_pb.Entity) -> None: ...
    def v4_value_to_v3_property_value(self, v4_value: entity_v4_pb.Value, v3_value: datastore_v3_pb2.PropertyValue) -> None: ...
    def v3_property_to_v4_value(self, v3_property: datastore_v3_pb2.Property, indexed: bool, v4_value: entity_v4_pb.Value) -> None: ...
    def __v4_to_v3_property(self, property_name: Text, is_multi: bool, v4_value: entity_v4_pb.Value, v3_property: datastore_v3_pb2.Property) -> None: ...
    def __add_v3_property(self, property_name: Text, is_multi: bool, v4_value: entity_v4_pb.Value, v3_entity: datastore_v3_pb2.EntityProto) -> None: ...
    def __build_name_to_v4_property_map(self, v4_entity: entity_v4_pb.Entity): ...
    def __add_v4_property_to_entity(self, v4_entity: entity_v4_pb.Entity, property_map: Dict[str,entity_v4_pb.Property], v3_property: datastore_v3_pb2.Property, indexed: bool) -> None: ...
    def __get_single_v4_integer_value(self, v4_property: entity_v4_pb.Property) -> int: ...
    def __get_single_v4_double_value(self, v4_property: entity_v4_pb.Property) -> float: ...
    def __get_single_v4_string_value(self, v4_property: entity_v4_pb.Property) -> str: ...
    def __v4_integer_property(self, name: Text, value: int, indexed: bool) -> entity_v4_pb.Property: ...
    def __v4_double_property(self, name: Text, value: float, indexed: bool) -> entity_v4_pb.Property: ...
    def __v4_string_property(self, name: Text, value: Text, indexed: bool) -> entity_v4_pb.Property: ...
    def __v4_to_v3_point_value(self, v4_point_entity: entity_v4_pb.Entity, v3_point_value: datastore_v3_pb2.PropertyValue.PointValue) -> None: ...
    def __v3_to_v4_point_entity(self, v3_point_value: datastore_v3_pb2.PropertyValue.PointValue, v4_entity: entity_v4_pb.Entity) -> None: ...
    def __v4_to_v3_user_value(self, v4_user_entity: entity_v4_pb.Entity, v3_user_value: datastore_v3_pb2.PropertyValue.UserValue) -> None: ...
    def __v3_to_v4_user_entity(self, v3_user_value: datastore_v3_pb2.PropertyValue.UserValue, v4_entity: entity_v4_pb.Entity) -> None: ...
    def __is_v3_property_value_union_valid(self, v3_property_value: datastore_v3_pb2.PropertyValue) -> bool: ...
    def __is_v3_property_value_meaning_valid(self, v3_property_value: datastore_v3_pb2.PropertyValue, v3_meaning: Any) -> bool: ...
    def __v3_reference_has_id_or_name(self, v3_ref: datastore_v3_pb2.Reference) -> bool: ...
    def v3_reference_to_group(self, v3_ref: datastore_v3_pb2.Reference, group: datastore_v3_pb2.Path) -> None: ...
    def v3_reference_to_v3_property_value(self, v3_ref: datastore_v3_pb2.Reference, v3_property_value: datastore_v3_pb2.PropertyValue) -> None: ...
    def __v3_reference_value_to_v3_reference(self, v3_ref_value: datastore_v3_pb2.PropertyValue.ReferenceValue, v3_ref: datastore_v3_pb2.Reference) -> None: ...

__entity_converter: Any

def get_entity_converter(): ...
