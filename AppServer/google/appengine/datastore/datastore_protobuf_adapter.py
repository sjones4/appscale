from google.appengine.datastore import datastore_v3_pb2


Action = datastore_v3_pb2.Action
Action.Encode = Action.SerializeToString
AddActionsRequest = datastore_v3_pb2.AddActionsRequest
AddActionsRequest.Encode = AddActionsRequest.SerializeToString
AddActionsRequest.action_size = lambda self: len(getattr(self,'action'))
AddActionsRequest.action_list = lambda self: getattr(self,'action')
AddActionsRequest.mutable_action = lambda self: getattr(self,'action')
AddActionsRequest.add_action = lambda self: getattr(self,'action').add()
AddActionsRequest.has_action = lambda self: self.HasField('action')
AddActionsRequest.clear_action = lambda self: self.ClearField('action')
AddActionsRequest.mutable_header = lambda self: getattr(self,'header')
AddActionsRequest.has_header = lambda self: self.HasField('header')
AddActionsRequest.clear_header = lambda self: self.ClearField('header')
AddActionsRequest.mutable_transaction = lambda self: getattr(self,'transaction')
AddActionsRequest.has_transaction = lambda self: self.HasField('transaction')
AddActionsRequest.clear_transaction = lambda self: self.ClearField('transaction')
AddActionsResponse = datastore_v3_pb2.AddActionsResponse
AddActionsResponse.Encode = AddActionsResponse.SerializeToString
AllocateIdsRequest = datastore_v3_pb2.AllocateIdsRequest
AllocateIdsRequest.Encode = AllocateIdsRequest.SerializeToString
AllocateIdsRequest.mutable_header = lambda self: getattr(self,'header')
AllocateIdsRequest.has_header = lambda self: self.HasField('header')
AllocateIdsRequest.clear_header = lambda self: self.ClearField('header')
AllocateIdsRequest.set_max = lambda self, value: setattr(self,'max', value)
AllocateIdsRequest.has_max = lambda self: self.HasField('max')
AllocateIdsRequest.clear_max = lambda self: self.ClearField('max')
AllocateIdsRequest.mutable_model_key = lambda self: getattr(self,'model_key')
AllocateIdsRequest.has_model_key = lambda self: self.HasField('model_key')
AllocateIdsRequest.clear_model_key = lambda self: self.ClearField('model_key')
AllocateIdsRequest.reserve_size = lambda self: len(getattr(self,'reserve'))
AllocateIdsRequest.reserve_list = lambda self: getattr(self,'reserve')
AllocateIdsRequest.mutable_reserve = lambda self: getattr(self,'reserve')
AllocateIdsRequest.add_reserve = lambda self: getattr(self,'reserve').add()
AllocateIdsRequest.has_reserve = lambda self: self.HasField('reserve')
AllocateIdsRequest.clear_reserve = lambda self: self.ClearField('reserve')
AllocateIdsRequest.set_size = lambda self, value: setattr(self,'size', value)
AllocateIdsRequest.has_size = lambda self: self.HasField('size')
AllocateIdsRequest.clear_size = lambda self: self.ClearField('size')
AllocateIdsResponse = datastore_v3_pb2.AllocateIdsResponse
AllocateIdsResponse.Encode = AllocateIdsResponse.SerializeToString
AllocateIdsResponse.mutable_cost = lambda self: getattr(self,'cost')
AllocateIdsResponse.has_cost = lambda self: self.HasField('cost')
AllocateIdsResponse.clear_cost = lambda self: self.ClearField('cost')
AllocateIdsResponse.set_end = lambda self, value: setattr(self,'end', value)
AllocateIdsResponse.has_end = lambda self: self.HasField('end')
AllocateIdsResponse.clear_end = lambda self: self.ClearField('end')
AllocateIdsResponse.set_start = lambda self, value: setattr(self,'start', value)
AllocateIdsResponse.has_start = lambda self: self.HasField('start')
AllocateIdsResponse.clear_start = lambda self: self.ClearField('start')
BeginTransactionRequest = datastore_v3_pb2.BeginTransactionRequest
BeginTransactionRequest.Encode = BeginTransactionRequest.SerializeToString
BeginTransactionRequest.set_allow_multiple_eg = lambda self, value: setattr(self,'allow_multiple_eg', value)
BeginTransactionRequest.has_allow_multiple_eg = lambda self: self.HasField('allow_multiple_eg')
BeginTransactionRequest.clear_allow_multiple_eg = lambda self: self.ClearField('allow_multiple_eg')
BeginTransactionRequest.set_app = lambda self, value: setattr(self,'app', value)
BeginTransactionRequest.has_app = lambda self: self.HasField('app')
BeginTransactionRequest.clear_app = lambda self: self.ClearField('app')
BeginTransactionRequest.set_database_id = lambda self, value: setattr(self,'database_id', value)
BeginTransactionRequest.has_database_id = lambda self: self.HasField('database_id')
BeginTransactionRequest.clear_database_id = lambda self: self.ClearField('database_id')
BeginTransactionRequest.mutable_header = lambda self: getattr(self,'header')
BeginTransactionRequest.has_header = lambda self: self.HasField('header')
BeginTransactionRequest.clear_header = lambda self: self.ClearField('header')
BeginTransactionRequest.set_mode = lambda self, value: setattr(self,'mode', value)
BeginTransactionRequest.has_mode = lambda self: self.HasField('mode')
BeginTransactionRequest.clear_mode = lambda self: self.ClearField('mode')
BeginTransactionRequest.mutable_previous_transaction = lambda self: getattr(self,'previous_transaction')
BeginTransactionRequest.has_previous_transaction = lambda self: self.HasField('previous_transaction')
BeginTransactionRequest.clear_previous_transaction = lambda self: self.ClearField('previous_transaction')
BeginTransactionRequest.UNKNOWN = datastore_v3_pb2.BeginTransactionRequest.TransactionMode.Value('UNKNOWN')
BeginTransactionRequest.READ_ONLY = datastore_v3_pb2.BeginTransactionRequest.TransactionMode.Value('READ_ONLY')
BeginTransactionRequest.READ_WRITE = datastore_v3_pb2.BeginTransactionRequest.TransactionMode.Value('READ_WRITE')
CommitResponse = datastore_v3_pb2.CommitResponse
CommitResponse.Encode = CommitResponse.SerializeToString
CommitResponse.mutable_cost = lambda self: getattr(self,'cost')
CommitResponse.has_cost = lambda self: self.HasField('cost')
CommitResponse.clear_cost = lambda self: self.ClearField('cost')
CommitResponse.version_size = lambda self: len(getattr(self,'version'))
CommitResponse.version_list = lambda self: getattr(self,'version')
CommitResponse.mutable_version = lambda self: getattr(self,'version')
CommitResponse.add_version = lambda self: getattr(self,'version').add()
CommitResponse.has_version = lambda self: self.HasField('version')
CommitResponse.clear_version = lambda self: self.ClearField('version')
CommitResponse_Version = datastore_v3_pb2.CommitResponse.Version
CommitResponse_Version.Encode = CommitResponse_Version.SerializeToString
CommitResponse_Version.mutable_root_entity_key = lambda self: getattr(self,'root_entity_key')
CommitResponse_Version.has_root_entity_key = lambda self: self.HasField('root_entity_key')
CommitResponse_Version.clear_root_entity_key = lambda self: self.ClearField('root_entity_key')
CommitResponse_Version.set_version = lambda self, value: setattr(self,'version', value)
CommitResponse_Version.has_version = lambda self: self.HasField('version')
CommitResponse_Version.clear_version = lambda self: self.ClearField('version')
CompiledCursor = datastore_v3_pb2.CompiledCursor
CompiledCursor.Encode = CompiledCursor.SerializeToString
CompiledCursor.mutable_position = lambda self: getattr(self,'position')
CompiledCursor.has_position = lambda self: self.HasField('position')
CompiledCursor.clear_position = lambda self: self.ClearField('position')
CompiledCursor_Position = datastore_v3_pb2.CompiledCursor.Position
CompiledCursor_Position.Encode = CompiledCursor_Position.SerializeToString
CompiledCursor_Position.indexvalue_size = lambda self: len(getattr(self,'indexvalue'))
CompiledCursor_Position.indexvalue_list = lambda self: getattr(self,'indexvalue')
CompiledCursor_Position.mutable_indexvalue = lambda self: getattr(self,'indexvalue')
CompiledCursor_Position.add_indexvalue = lambda self: getattr(self,'indexvalue').add()
CompiledCursor_Position.has_indexvalue = lambda self: self.HasField('indexvalue')
CompiledCursor_Position.clear_indexvalue = lambda self: self.ClearField('indexvalue')
CompiledCursor_Position.mutable_key = lambda self: getattr(self,'key')
CompiledCursor_Position.has_key = lambda self: self.HasField('key')
CompiledCursor_Position.clear_key = lambda self: self.ClearField('key')
CompiledCursor_Position.set_start_inclusive = lambda self, value: setattr(self,'start_inclusive', value)
CompiledCursor_Position.has_start_inclusive = lambda self: self.HasField('start_inclusive')
CompiledCursor_Position.clear_start_inclusive = lambda self: self.ClearField('start_inclusive')
CompiledCursor_Position.set_start_key = lambda self, value: setattr(self,'start_key', value)
CompiledCursor_Position.has_start_key = lambda self: self.HasField('start_key')
CompiledCursor_Position.clear_start_key = lambda self: self.ClearField('start_key')
CompiledCursor_PositionIndexValue = datastore_v3_pb2.CompiledCursor.Position.IndexValue
CompiledCursor_PositionIndexValue.Encode = CompiledCursor_PositionIndexValue.SerializeToString
CompiledCursor_PositionIndexValue.set_property = lambda self, value: setattr(self,'property', value)
CompiledCursor_PositionIndexValue.has_property = lambda self: self.HasField('property')
CompiledCursor_PositionIndexValue.clear_property = lambda self: self.ClearField('property')
CompiledCursor_PositionIndexValue.mutable_value = lambda self: getattr(self,'value')
CompiledCursor_PositionIndexValue.has_value = lambda self: self.HasField('value')
CompiledCursor_PositionIndexValue.clear_value = lambda self: self.ClearField('value')
CompiledQuery = datastore_v3_pb2.CompiledQuery
CompiledQuery.Encode = CompiledQuery.SerializeToString
CompiledQuery.set_distinct_infix_size = lambda self, value: setattr(self,'distinct_infix_size', value)
CompiledQuery.has_distinct_infix_size = lambda self: self.HasField('distinct_infix_size')
CompiledQuery.clear_distinct_infix_size = lambda self: self.ClearField('distinct_infix_size')
CompiledQuery.mutable_entityfilter = lambda self: getattr(self,'entityfilter')
CompiledQuery.has_entityfilter = lambda self: self.HasField('entityfilter')
CompiledQuery.clear_entityfilter = lambda self: self.ClearField('entityfilter')
CompiledQuery.mutable_index_def = lambda self: getattr(self,'index_def')
CompiledQuery.has_index_def = lambda self: self.HasField('index_def')
CompiledQuery.clear_index_def = lambda self: self.ClearField('index_def')
CompiledQuery.set_keys_only = lambda self, value: setattr(self,'keys_only', value)
CompiledQuery.has_keys_only = lambda self: self.HasField('keys_only')
CompiledQuery.clear_keys_only = lambda self: self.ClearField('keys_only')
CompiledQuery.set_limit = lambda self, value: setattr(self,'limit', value)
CompiledQuery.has_limit = lambda self: self.HasField('limit')
CompiledQuery.clear_limit = lambda self: self.ClearField('limit')
CompiledQuery.mergejoinscan_size = lambda self: len(getattr(self,'mergejoinscan'))
CompiledQuery.mergejoinscan_list = lambda self: getattr(self,'mergejoinscan')
CompiledQuery.mutable_mergejoinscan = lambda self: getattr(self,'mergejoinscan')
CompiledQuery.add_mergejoinscan = lambda self: getattr(self,'mergejoinscan').add()
CompiledQuery.has_mergejoinscan = lambda self: self.HasField('mergejoinscan')
CompiledQuery.clear_mergejoinscan = lambda self: self.ClearField('mergejoinscan')
CompiledQuery.set_offset = lambda self, value: setattr(self,'offset', value)
CompiledQuery.has_offset = lambda self: self.HasField('offset')
CompiledQuery.clear_offset = lambda self: self.ClearField('offset')
CompiledQuery.mutable_primaryscan = lambda self: getattr(self,'primaryscan')
CompiledQuery.has_primaryscan = lambda self: self.HasField('primaryscan')
CompiledQuery.clear_primaryscan = lambda self: self.ClearField('primaryscan')
CompiledQuery.property_name_size = lambda self: len(getattr(self,'property_name'))
CompiledQuery.property_name_list = lambda self: getattr(self,'property_name')
CompiledQuery.mutable_property_name = lambda self: getattr(self,'property_name')
CompiledQuery.add_property_name = lambda self, value: getattr(self,'property_name').append(value)
CompiledQuery.has_property_name = lambda self: self.HasField('property_name')
CompiledQuery.clear_property_name = lambda self: self.ClearField('property_name')
CompiledQuery_EntityFilter = datastore_v3_pb2.CompiledQuery.EntityFilter
CompiledQuery_EntityFilter.Encode = CompiledQuery_EntityFilter.SerializeToString
CompiledQuery_EntityFilter.mutable_ancestor = lambda self: getattr(self,'ancestor')
CompiledQuery_EntityFilter.has_ancestor = lambda self: self.HasField('ancestor')
CompiledQuery_EntityFilter.clear_ancestor = lambda self: self.ClearField('ancestor')
CompiledQuery_EntityFilter.set_distinct = lambda self, value: setattr(self,'distinct', value)
CompiledQuery_EntityFilter.has_distinct = lambda self: self.HasField('distinct')
CompiledQuery_EntityFilter.clear_distinct = lambda self: self.ClearField('distinct')
CompiledQuery_EntityFilter.set_kind = lambda self, value: setattr(self,'kind', value)
CompiledQuery_EntityFilter.has_kind = lambda self: self.HasField('kind')
CompiledQuery_EntityFilter.clear_kind = lambda self: self.ClearField('kind')
CompiledQuery_MergeJoinScan = datastore_v3_pb2.CompiledQuery.MergeJoinScan
CompiledQuery_MergeJoinScan.Encode = CompiledQuery_MergeJoinScan.SerializeToString
CompiledQuery_MergeJoinScan.set_index_name = lambda self, value: setattr(self,'index_name', value)
CompiledQuery_MergeJoinScan.has_index_name = lambda self: self.HasField('index_name')
CompiledQuery_MergeJoinScan.clear_index_name = lambda self: self.ClearField('index_name')
CompiledQuery_MergeJoinScan.prefix_value_size = lambda self: len(getattr(self,'prefix_value'))
CompiledQuery_MergeJoinScan.prefix_value_list = lambda self: getattr(self,'prefix_value')
CompiledQuery_MergeJoinScan.mutable_prefix_value = lambda self: getattr(self,'prefix_value')
CompiledQuery_MergeJoinScan.add_prefix_value = lambda self, value: getattr(self,'prefix_value').append(value)
CompiledQuery_MergeJoinScan.has_prefix_value = lambda self: self.HasField('prefix_value')
CompiledQuery_MergeJoinScan.clear_prefix_value = lambda self: self.ClearField('prefix_value')
CompiledQuery_MergeJoinScan.set_value_prefix = lambda self, value: setattr(self,'value_prefix', value)
CompiledQuery_MergeJoinScan.has_value_prefix = lambda self: self.HasField('value_prefix')
CompiledQuery_MergeJoinScan.clear_value_prefix = lambda self: self.ClearField('value_prefix')
CompiledQuery_PrimaryScan = datastore_v3_pb2.CompiledQuery.PrimaryScan
CompiledQuery_PrimaryScan.Encode = CompiledQuery_PrimaryScan.SerializeToString
CompiledQuery_PrimaryScan.set_end_inclusive = lambda self, value: setattr(self,'end_inclusive', value)
CompiledQuery_PrimaryScan.has_end_inclusive = lambda self: self.HasField('end_inclusive')
CompiledQuery_PrimaryScan.clear_end_inclusive = lambda self: self.ClearField('end_inclusive')
CompiledQuery_PrimaryScan.set_end_key = lambda self, value: setattr(self,'end_key', value)
CompiledQuery_PrimaryScan.has_end_key = lambda self: self.HasField('end_key')
CompiledQuery_PrimaryScan.clear_end_key = lambda self: self.ClearField('end_key')
CompiledQuery_PrimaryScan.end_postfix_value_size = lambda self: len(getattr(self,'end_postfix_value'))
CompiledQuery_PrimaryScan.end_postfix_value_list = lambda self: getattr(self,'end_postfix_value')
CompiledQuery_PrimaryScan.mutable_end_postfix_value = lambda self: getattr(self,'end_postfix_value')
CompiledQuery_PrimaryScan.add_end_postfix_value = lambda self, value: getattr(self,'end_postfix_value').append(value)
CompiledQuery_PrimaryScan.has_end_postfix_value = lambda self: self.HasField('end_postfix_value')
CompiledQuery_PrimaryScan.clear_end_postfix_value = lambda self: self.ClearField('end_postfix_value')
CompiledQuery_PrimaryScan.set_end_unapplied_log_timestamp_us = lambda self, value: setattr(self,'end_unapplied_log_timestamp_us', value)
CompiledQuery_PrimaryScan.has_end_unapplied_log_timestamp_us = lambda self: self.HasField('end_unapplied_log_timestamp_us')
CompiledQuery_PrimaryScan.clear_end_unapplied_log_timestamp_us = lambda self: self.ClearField('end_unapplied_log_timestamp_us')
CompiledQuery_PrimaryScan.set_index_name = lambda self, value: setattr(self,'index_name', value)
CompiledQuery_PrimaryScan.has_index_name = lambda self: self.HasField('index_name')
CompiledQuery_PrimaryScan.clear_index_name = lambda self: self.ClearField('index_name')
CompiledQuery_PrimaryScan.set_start_inclusive = lambda self, value: setattr(self,'start_inclusive', value)
CompiledQuery_PrimaryScan.has_start_inclusive = lambda self: self.HasField('start_inclusive')
CompiledQuery_PrimaryScan.clear_start_inclusive = lambda self: self.ClearField('start_inclusive')
CompiledQuery_PrimaryScan.set_start_key = lambda self, value: setattr(self,'start_key', value)
CompiledQuery_PrimaryScan.has_start_key = lambda self: self.HasField('start_key')
CompiledQuery_PrimaryScan.clear_start_key = lambda self: self.ClearField('start_key')
CompiledQuery_PrimaryScan.start_postfix_value_size = lambda self: len(getattr(self,'start_postfix_value'))
CompiledQuery_PrimaryScan.start_postfix_value_list = lambda self: getattr(self,'start_postfix_value')
CompiledQuery_PrimaryScan.mutable_start_postfix_value = lambda self: getattr(self,'start_postfix_value')
CompiledQuery_PrimaryScan.add_start_postfix_value = lambda self, value: getattr(self,'start_postfix_value').append(value)
CompiledQuery_PrimaryScan.has_start_postfix_value = lambda self: self.HasField('start_postfix_value')
CompiledQuery_PrimaryScan.clear_start_postfix_value = lambda self: self.ClearField('start_postfix_value')
CompositeIndex = datastore_v3_pb2.CompositeIndex
CompositeIndex.Encode = CompositeIndex.SerializeToString
CompositeIndex.set_app_id = lambda self, value: setattr(self,'app_id', value)
CompositeIndex.has_app_id = lambda self: self.HasField('app_id')
CompositeIndex.clear_app_id = lambda self: self.ClearField('app_id')
CompositeIndex.mutable_definition = lambda self: getattr(self,'definition')
CompositeIndex.has_definition = lambda self: self.HasField('definition')
CompositeIndex.clear_definition = lambda self: self.ClearField('definition')
CompositeIndex.set_id = lambda self, value: setattr(self,'id', value)
CompositeIndex.has_id = lambda self: self.HasField('id')
CompositeIndex.clear_id = lambda self: self.ClearField('id')
CompositeIndex.set_only_use_if_required = lambda self, value: setattr(self,'only_use_if_required', value)
CompositeIndex.has_only_use_if_required = lambda self: self.HasField('only_use_if_required')
CompositeIndex.clear_only_use_if_required = lambda self: self.ClearField('only_use_if_required')
CompositeIndex.set_state = lambda self, value: setattr(self,'state', value)
CompositeIndex.has_state = lambda self: self.HasField('state')
CompositeIndex.clear_state = lambda self: self.ClearField('state')
CompositeIndex.WRITE_ONLY = datastore_v3_pb2.CompositeIndex.State.Value('WRITE_ONLY')
CompositeIndex.READ_WRITE = datastore_v3_pb2.CompositeIndex.State.Value('READ_WRITE')
CompositeIndex.DELETED = datastore_v3_pb2.CompositeIndex.State.Value('DELETED')
CompositeIndex.ERROR = datastore_v3_pb2.CompositeIndex.State.Value('ERROR')
CompositeIndices = datastore_v3_pb2.CompositeIndices
CompositeIndices.Encode = CompositeIndices.SerializeToString
CompositeIndices.index_size = lambda self: len(getattr(self,'index'))
CompositeIndices.index_list = lambda self: getattr(self,'index')
CompositeIndices.mutable_index = lambda self: getattr(self,'index')
CompositeIndices.add_index = lambda self: getattr(self,'index').add()
CompositeIndices.has_index = lambda self: self.HasField('index')
CompositeIndices.clear_index = lambda self: self.ClearField('index')
CompositeProperty = datastore_v3_pb2.CompositeProperty
CompositeProperty.Encode = CompositeProperty.SerializeToString
CompositeProperty.set_index_id = lambda self, value: setattr(self,'index_id', value)
CompositeProperty.has_index_id = lambda self: self.HasField('index_id')
CompositeProperty.clear_index_id = lambda self: self.ClearField('index_id')
CompositeProperty.value_size = lambda self: len(getattr(self,'value'))
CompositeProperty.value_list = lambda self: getattr(self,'value')
CompositeProperty.mutable_value = lambda self: getattr(self,'value')
CompositeProperty.add_value = lambda self, value: getattr(self,'value').append(value)
CompositeProperty.has_value = lambda self: self.HasField('value')
CompositeProperty.clear_value = lambda self: self.ClearField('value')
Cost = datastore_v3_pb2.Cost
Cost.Encode = Cost.SerializeToString
Cost.set_approximate_storage_delta = lambda self, value: setattr(self,'approximate_storage_delta', value)
Cost.has_approximate_storage_delta = lambda self: self.HasField('approximate_storage_delta')
Cost.clear_approximate_storage_delta = lambda self: self.ClearField('approximate_storage_delta')
Cost.mutable_commitcost = lambda self: getattr(self,'commitcost')
Cost.has_commitcost = lambda self: self.HasField('commitcost')
Cost.clear_commitcost = lambda self: self.ClearField('commitcost')
Cost.set_entity_writes = lambda self, value: setattr(self,'entity_writes', value)
Cost.has_entity_writes = lambda self: self.HasField('entity_writes')
Cost.clear_entity_writes = lambda self: self.ClearField('entity_writes')
Cost.set_entity_write_bytes = lambda self, value: setattr(self,'entity_write_bytes', value)
Cost.has_entity_write_bytes = lambda self: self.HasField('entity_write_bytes')
Cost.clear_entity_write_bytes = lambda self: self.ClearField('entity_write_bytes')
Cost.set_id_sequence_updates = lambda self, value: setattr(self,'id_sequence_updates', value)
Cost.has_id_sequence_updates = lambda self: self.HasField('id_sequence_updates')
Cost.clear_id_sequence_updates = lambda self: self.ClearField('id_sequence_updates')
Cost.set_index_writes = lambda self, value: setattr(self,'index_writes', value)
Cost.has_index_writes = lambda self: self.HasField('index_writes')
Cost.clear_index_writes = lambda self: self.ClearField('index_writes')
Cost.set_index_write_bytes = lambda self, value: setattr(self,'index_write_bytes', value)
Cost.has_index_write_bytes = lambda self: self.HasField('index_write_bytes')
Cost.clear_index_write_bytes = lambda self: self.ClearField('index_write_bytes')
Cost_CommitCost = datastore_v3_pb2.Cost.CommitCost
Cost_CommitCost.Encode = Cost_CommitCost.SerializeToString
Cost_CommitCost.set_requested_entity_deletes = lambda self, value: setattr(self,'requested_entity_deletes', value)
Cost_CommitCost.has_requested_entity_deletes = lambda self: self.HasField('requested_entity_deletes')
Cost_CommitCost.clear_requested_entity_deletes = lambda self: self.ClearField('requested_entity_deletes')
Cost_CommitCost.set_requested_entity_puts = lambda self, value: setattr(self,'requested_entity_puts', value)
Cost_CommitCost.has_requested_entity_puts = lambda self: self.HasField('requested_entity_puts')
Cost_CommitCost.clear_requested_entity_puts = lambda self: self.ClearField('requested_entity_puts')
Cursor = datastore_v3_pb2.Cursor
Cursor.Encode = Cursor.SerializeToString
Cursor.set_app = lambda self, value: setattr(self,'app', value)
Cursor.has_app = lambda self: self.HasField('app')
Cursor.clear_app = lambda self: self.ClearField('app')
Cursor.set_cursor = lambda self, value: setattr(self,'cursor', value)
Cursor.has_cursor = lambda self: self.HasField('cursor')
Cursor.clear_cursor = lambda self: self.ClearField('cursor')
DeleteRequest = datastore_v3_pb2.DeleteRequest
DeleteRequest.Encode = DeleteRequest.SerializeToString
DeleteRequest.set_force = lambda self, value: setattr(self,'force', value)
DeleteRequest.has_force = lambda self: self.HasField('force')
DeleteRequest.clear_force = lambda self: self.ClearField('force')
DeleteRequest.mutable_header = lambda self: getattr(self,'header')
DeleteRequest.has_header = lambda self: self.HasField('header')
DeleteRequest.clear_header = lambda self: self.ClearField('header')
DeleteRequest.key_size = lambda self: len(getattr(self,'key'))
DeleteRequest.key_list = lambda self: getattr(self,'key')
DeleteRequest.mutable_key = lambda self: getattr(self,'key')
DeleteRequest.add_key = lambda self: getattr(self,'key').add()
DeleteRequest.has_key = lambda self: self.HasField('key')
DeleteRequest.clear_key = lambda self: self.ClearField('key')
DeleteRequest.set_mark_changes = lambda self, value: setattr(self,'mark_changes', value)
DeleteRequest.has_mark_changes = lambda self: self.HasField('mark_changes')
DeleteRequest.clear_mark_changes = lambda self: self.ClearField('mark_changes')
DeleteRequest.snapshot_size = lambda self: len(getattr(self,'snapshot'))
DeleteRequest.snapshot_list = lambda self: getattr(self,'snapshot')
DeleteRequest.mutable_snapshot = lambda self: getattr(self,'snapshot')
DeleteRequest.add_snapshot = lambda self: getattr(self,'snapshot').add()
DeleteRequest.has_snapshot = lambda self: self.HasField('snapshot')
DeleteRequest.clear_snapshot = lambda self: self.ClearField('snapshot')
DeleteRequest.mutable_transaction = lambda self: getattr(self,'transaction')
DeleteRequest.has_transaction = lambda self: self.HasField('transaction')
DeleteRequest.clear_transaction = lambda self: self.ClearField('transaction')
DeleteRequest.set_trusted = lambda self, value: setattr(self,'trusted', value)
DeleteRequest.has_trusted = lambda self: self.HasField('trusted')
DeleteRequest.clear_trusted = lambda self: self.ClearField('trusted')
DeleteResponse = datastore_v3_pb2.DeleteResponse
DeleteResponse.Encode = DeleteResponse.SerializeToString
DeleteResponse.mutable_cost = lambda self: getattr(self,'cost')
DeleteResponse.has_cost = lambda self: self.HasField('cost')
DeleteResponse.clear_cost = lambda self: self.ClearField('cost')
DeleteResponse.version_size = lambda self: len(getattr(self,'version'))
DeleteResponse.version_list = lambda self: getattr(self,'version')
DeleteResponse.mutable_version = lambda self: getattr(self,'version')
DeleteResponse.add_version = lambda self, value: getattr(self,'version').append(value)
DeleteResponse.has_version = lambda self: self.HasField('version')
DeleteResponse.clear_version = lambda self: self.ClearField('version')
EntityProto = datastore_v3_pb2.EntityProto
EntityProto.Encode = EntityProto.SerializeToString
EntityProto.mutable_entity_group = lambda self: getattr(self,'entity_group')
EntityProto.has_entity_group = lambda self: self.HasField('entity_group')
EntityProto.clear_entity_group = lambda self: self.ClearField('entity_group')
EntityProto.mutable_key = lambda self: getattr(self,'key')
EntityProto.has_key = lambda self: self.HasField('key')
EntityProto.clear_key = lambda self: self.ClearField('key')
EntityProto.set_kind = lambda self, value: setattr(self,'kind', value)
EntityProto.has_kind = lambda self: self.HasField('kind')
EntityProto.clear_kind = lambda self: self.ClearField('kind')
EntityProto.set_kind_uri = lambda self, value: setattr(self,'kind_uri', value)
EntityProto.has_kind_uri = lambda self: self.HasField('kind_uri')
EntityProto.clear_kind_uri = lambda self: self.ClearField('kind_uri')
EntityProto.GD_CONTACT = datastore_v3_pb2.EntityProto.Kind.Value('GD_CONTACT')
EntityProto.GD_EVENT = datastore_v3_pb2.EntityProto.Kind.Value('GD_EVENT')
EntityProto.GD_MESSAGE = datastore_v3_pb2.EntityProto.Kind.Value('GD_MESSAGE')
EntityProto.mutable_owner = lambda self: getattr(self,'owner')
EntityProto.has_owner = lambda self: self.HasField('owner')
EntityProto.clear_owner = lambda self: self.ClearField('owner')
EntityProto.property_size = lambda self: len(getattr(self,'property'))
EntityProto.property_list = lambda self: getattr(self,'property')
EntityProto.mutable_property = lambda self: getattr(self,'property')
EntityProto.add_property = lambda self: getattr(self,'property').add()
EntityProto.has_property = lambda self: self.HasField('property')
EntityProto.clear_property = lambda self: self.ClearField('property')
EntityProto.set_rank = lambda self, value: setattr(self,'rank', value)
EntityProto.has_rank = lambda self: self.HasField('rank')
EntityProto.clear_rank = lambda self: self.ClearField('rank')
EntityProto.raw_property_size = lambda self: len(getattr(self,'raw_property'))
EntityProto.raw_property_list = lambda self: getattr(self,'raw_property')
EntityProto.mutable_raw_property = lambda self: getattr(self,'raw_property')
EntityProto.add_raw_property = lambda self: getattr(self,'raw_property').add()
EntityProto.has_raw_property = lambda self: self.HasField('raw_property')
EntityProto.clear_raw_property = lambda self: self.ClearField('raw_property')
Error = datastore_v3_pb2.Error
Error.Encode = Error.SerializeToString
Error.BAD_REQUEST = datastore_v3_pb2.Error.ErrorCode.Value('BAD_REQUEST')
Error.CONCURRENT_TRANSACTION = datastore_v3_pb2.Error.ErrorCode.Value('CONCURRENT_TRANSACTION')
Error.INTERNAL_ERROR = datastore_v3_pb2.Error.ErrorCode.Value('INTERNAL_ERROR')
Error.NEED_INDEX = datastore_v3_pb2.Error.ErrorCode.Value('NEED_INDEX')
Error.TIMEOUT = datastore_v3_pb2.Error.ErrorCode.Value('TIMEOUT')
Error.PERMISSION_DENIED = datastore_v3_pb2.Error.ErrorCode.Value('PERMISSION_DENIED')
Error.BIGTABLE_ERROR = datastore_v3_pb2.Error.ErrorCode.Value('BIGTABLE_ERROR')
Error.COMMITTED_BUT_STILL_APPLYING = datastore_v3_pb2.Error.ErrorCode.Value('COMMITTED_BUT_STILL_APPLYING')
Error.CAPABILITY_DISABLED = datastore_v3_pb2.Error.ErrorCode.Value('CAPABILITY_DISABLED')
Error.TRY_ALTERNATE_BACKEND = datastore_v3_pb2.Error.ErrorCode.Value('TRY_ALTERNATE_BACKEND')
Error.SAFE_TIME_TOO_OLD = datastore_v3_pb2.Error.ErrorCode.Value('SAFE_TIME_TOO_OLD')
GetRequest = datastore_v3_pb2.GetRequest
GetRequest.Encode = GetRequest.SerializeToString
GetRequest.set_allow_deferred = lambda self, value: setattr(self,'allow_deferred', value)
GetRequest.has_allow_deferred = lambda self: self.HasField('allow_deferred')
GetRequest.clear_allow_deferred = lambda self: self.ClearField('allow_deferred')
GetRequest.set_failover_ms = lambda self, value: setattr(self,'failover_ms', value)
GetRequest.has_failover_ms = lambda self: self.HasField('failover_ms')
GetRequest.clear_failover_ms = lambda self: self.ClearField('failover_ms')
GetRequest.mutable_header = lambda self: getattr(self,'header')
GetRequest.has_header = lambda self: self.HasField('header')
GetRequest.clear_header = lambda self: self.ClearField('header')
GetRequest.key_size = lambda self: len(getattr(self,'key'))
GetRequest.key_list = lambda self: getattr(self,'key')
GetRequest.mutable_key = lambda self: getattr(self,'key')
GetRequest.add_key = lambda self: getattr(self,'key').add()
GetRequest.has_key = lambda self: self.HasField('key')
GetRequest.clear_key = lambda self: self.ClearField('key')
GetRequest.set_strong = lambda self, value: setattr(self,'strong', value)
GetRequest.has_strong = lambda self: self.HasField('strong')
GetRequest.clear_strong = lambda self: self.ClearField('strong')
GetRequest.mutable_transaction = lambda self: getattr(self,'transaction')
GetRequest.has_transaction = lambda self: self.HasField('transaction')
GetRequest.clear_transaction = lambda self: self.ClearField('transaction')
GetResponse = datastore_v3_pb2.GetResponse
GetResponse.Encode = GetResponse.SerializeToString
GetResponse.deferred_size = lambda self: len(getattr(self,'deferred'))
GetResponse.deferred_list = lambda self: getattr(self,'deferred')
GetResponse.mutable_deferred = lambda self: getattr(self,'deferred')
GetResponse.add_deferred = lambda self: getattr(self,'deferred').add()
GetResponse.has_deferred = lambda self: self.HasField('deferred')
GetResponse.clear_deferred = lambda self: self.ClearField('deferred')
GetResponse.entity_size = lambda self: len(getattr(self,'entity'))
GetResponse.entity_list = lambda self: getattr(self,'entity')
GetResponse.mutable_entity = lambda self: getattr(self,'entity')
GetResponse.add_entity = lambda self: getattr(self,'entity').add()
GetResponse.has_entity = lambda self: self.HasField('entity')
GetResponse.clear_entity = lambda self: self.ClearField('entity')
GetResponse.set_in_order = lambda self, value: setattr(self,'in_order', value)
GetResponse.has_in_order = lambda self: self.HasField('in_order')
GetResponse.clear_in_order = lambda self: self.ClearField('in_order')
GetResponse_Entity = datastore_v3_pb2.GetResponse.Entity
GetResponse_Entity.Encode = GetResponse_Entity.SerializeToString
GetResponse_Entity.mutable_entity = lambda self: getattr(self,'entity')
GetResponse_Entity.has_entity = lambda self: self.HasField('entity')
GetResponse_Entity.clear_entity = lambda self: self.ClearField('entity')
GetResponse_Entity.mutable_key = lambda self: getattr(self,'key')
GetResponse_Entity.has_key = lambda self: self.HasField('key')
GetResponse_Entity.clear_key = lambda self: self.ClearField('key')
GetResponse_Entity.set_version = lambda self, value: setattr(self,'version', value)
GetResponse_Entity.has_version = lambda self: self.HasField('version')
GetResponse_Entity.clear_version = lambda self: self.ClearField('version')
Index = datastore_v3_pb2.Index
Index.Encode = Index.SerializeToString
Index.set_ancestor = lambda self, value: setattr(self,'ancestor', value)
Index.has_ancestor = lambda self: self.HasField('ancestor')
Index.clear_ancestor = lambda self: self.ClearField('ancestor')
Index.set_entity_type = lambda self, value: setattr(self,'entity_type', value)
Index.has_entity_type = lambda self: self.HasField('entity_type')
Index.clear_entity_type = lambda self: self.ClearField('entity_type')
Index.property_size = lambda self: len(getattr(self,'property'))
Index.property_list = lambda self: getattr(self,'property')
Index.mutable_property = lambda self: getattr(self,'property')
Index.add_property = lambda self: getattr(self,'property').add()
Index.has_property = lambda self: self.HasField('property')
Index.clear_property = lambda self: self.ClearField('property')
Index_Property = datastore_v3_pb2.Index.Property
Index_Property.Encode = Index_Property.SerializeToString
Index_Property.set_direction = lambda self, value: setattr(self,'direction', value)
Index_Property.has_direction = lambda self: self.HasField('direction')
Index_Property.clear_direction = lambda self: self.ClearField('direction')
Index_Property.ASCENDING = datastore_v3_pb2.Index.Property.Direction.Value('ASCENDING')
Index_Property.DESCENDING = datastore_v3_pb2.Index.Property.Direction.Value('DESCENDING')
Index_Property.set_name = lambda self, value: setattr(self,'name', value)
Index_Property.has_name = lambda self: self.HasField('name')
Index_Property.clear_name = lambda self: self.ClearField('name')
IndexPosition = datastore_v3_pb2.IndexPosition
IndexPosition.Encode = IndexPosition.SerializeToString
IndexPosition.set_before = lambda self, value: setattr(self,'before', value)
IndexPosition.has_before = lambda self: self.HasField('before')
IndexPosition.clear_before = lambda self: self.ClearField('before')
IndexPosition.set_key = lambda self, value: setattr(self,'key', value)
IndexPosition.has_key = lambda self: self.HasField('key')
IndexPosition.clear_key = lambda self: self.ClearField('key')
IndexPostfix = datastore_v3_pb2.IndexPostfix
IndexPostfix.Encode = IndexPostfix.SerializeToString
IndexPostfix.set_before = lambda self, value: setattr(self,'before', value)
IndexPostfix.has_before = lambda self: self.HasField('before')
IndexPostfix.clear_before = lambda self: self.ClearField('before')
IndexPostfix.index_value_size = lambda self: len(getattr(self,'index_value'))
IndexPostfix.index_value_list = lambda self: getattr(self,'index_value')
IndexPostfix.mutable_index_value = lambda self: getattr(self,'index_value')
IndexPostfix.add_index_value = lambda self: getattr(self,'index_value').add()
IndexPostfix.has_index_value = lambda self: self.HasField('index_value')
IndexPostfix.clear_index_value = lambda self: self.ClearField('index_value')
IndexPostfix.mutable_key = lambda self: getattr(self,'key')
IndexPostfix.has_key = lambda self: self.HasField('key')
IndexPostfix.clear_key = lambda self: self.ClearField('key')
IndexPostfix_IndexValue = datastore_v3_pb2.IndexPostfix.IndexValue
IndexPostfix_IndexValue.Encode = IndexPostfix_IndexValue.SerializeToString
IndexPostfix_IndexValue.set_property_name = lambda self, value: setattr(self,'property_name', value)
IndexPostfix_IndexValue.has_property_name = lambda self: self.HasField('property_name')
IndexPostfix_IndexValue.clear_property_name = lambda self: self.ClearField('property_name')
IndexPostfix_IndexValue.mutable_value = lambda self: getattr(self,'value')
IndexPostfix_IndexValue.has_value = lambda self: self.HasField('value')
IndexPostfix_IndexValue.clear_value = lambda self: self.ClearField('value')
InternalHeader = datastore_v3_pb2.InternalHeader
InternalHeader.Encode = InternalHeader.SerializeToString
InternalHeader.set_qos = lambda self, value: setattr(self,'qos', value)
InternalHeader.has_qos = lambda self: self.HasField('qos')
InternalHeader.clear_qos = lambda self: self.ClearField('qos')
NextRequest = datastore_v3_pb2.NextRequest
NextRequest.Encode = NextRequest.SerializeToString
NextRequest.set_compile = lambda self, value: setattr(self,'compile', value)
NextRequest.has_compile = lambda self: self.HasField('compile')
NextRequest.clear_compile = lambda self: self.ClearField('compile')
NextRequest.set_count = lambda self, value: setattr(self,'count', value)
NextRequest.has_count = lambda self: self.HasField('count')
NextRequest.clear_count = lambda self: self.ClearField('count')
NextRequest.mutable_cursor = lambda self: getattr(self,'cursor')
NextRequest.has_cursor = lambda self: self.HasField('cursor')
NextRequest.clear_cursor = lambda self: self.ClearField('cursor')
NextRequest.mutable_header = lambda self: getattr(self,'header')
NextRequest.has_header = lambda self: self.HasField('header')
NextRequest.clear_header = lambda self: self.ClearField('header')
NextRequest.set_offset = lambda self, value: setattr(self,'offset', value)
NextRequest.has_offset = lambda self: self.HasField('offset')
NextRequest.clear_offset = lambda self: self.ClearField('offset')
Path = datastore_v3_pb2.Path
Path.Encode = Path.SerializeToString
Path.element_size = lambda self: len(getattr(self,'element'))
Path.element_list = lambda self: getattr(self,'element')
Path.mutable_element = lambda self: getattr(self,'element')
Path.add_element = lambda self: getattr(self,'element').add()
Path.has_element = lambda self: self.HasField('element')
Path.clear_element = lambda self: self.ClearField('element')
Path_Element = datastore_v3_pb2.Path.Element
Path_Element.Encode = Path_Element.SerializeToString
Path_Element.set_id = lambda self, value: setattr(self,'id', value)
Path_Element.has_id = lambda self: self.HasField('id')
Path_Element.clear_id = lambda self: self.ClearField('id')
Path_Element.set_name = lambda self, value: setattr(self,'name', value)
Path_Element.has_name = lambda self: self.HasField('name')
Path_Element.clear_name = lambda self: self.ClearField('name')
Path_Element.set_type = lambda self, value: setattr(self,'type', value)
Path_Element.has_type = lambda self: self.HasField('type')
Path_Element.clear_type = lambda self: self.ClearField('type')
Property = datastore_v3_pb2.Property
Property.Encode = Property.SerializeToString
Property.set_fts_tokenization_option = lambda self, value: setattr(self,'fts_tokenization_option', value)
Property.has_fts_tokenization_option = lambda self: self.HasField('fts_tokenization_option')
Property.clear_fts_tokenization_option = lambda self: self.ClearField('fts_tokenization_option')
Property.HTML = datastore_v3_pb2.Property.FtsTokenizationOption.Value('HTML')
Property.ATOM = datastore_v3_pb2.Property.FtsTokenizationOption.Value('ATOM')
Property.set_locale = lambda self, value: setattr(self,'locale', value)
Property.has_locale = lambda self: self.HasField('locale')
Property.clear_locale = lambda self: self.ClearField('locale')
Property.set_meaning = lambda self, value: setattr(self,'meaning', value)
Property.has_meaning = lambda self: self.HasField('meaning')
Property.clear_meaning = lambda self: self.ClearField('meaning')
Property.set_meaning_uri = lambda self, value: setattr(self,'meaning_uri', value)
Property.has_meaning_uri = lambda self: self.HasField('meaning_uri')
Property.clear_meaning_uri = lambda self: self.ClearField('meaning_uri')
Property.set_multiple = lambda self, value: setattr(self,'multiple', value)
Property.has_multiple = lambda self: self.HasField('multiple')
Property.clear_multiple = lambda self: self.ClearField('multiple')
Property.NO_MEANING = datastore_v3_pb2.Property.Meaning.Value('NO_MEANING')
Property.BLOB = datastore_v3_pb2.Property.Meaning.Value('BLOB')
Property.TEXT = datastore_v3_pb2.Property.Meaning.Value('TEXT')
Property.BYTESTRING = datastore_v3_pb2.Property.Meaning.Value('BYTESTRING')
Property.ATOM_CATEGORY = datastore_v3_pb2.Property.Meaning.Value('ATOM_CATEGORY')
Property.ATOM_LINK = datastore_v3_pb2.Property.Meaning.Value('ATOM_LINK')
Property.ATOM_TITLE = datastore_v3_pb2.Property.Meaning.Value('ATOM_TITLE')
Property.ATOM_CONTENT = datastore_v3_pb2.Property.Meaning.Value('ATOM_CONTENT')
Property.ATOM_SUMMARY = datastore_v3_pb2.Property.Meaning.Value('ATOM_SUMMARY')
Property.ATOM_AUTHOR = datastore_v3_pb2.Property.Meaning.Value('ATOM_AUTHOR')
Property.GD_WHEN = datastore_v3_pb2.Property.Meaning.Value('GD_WHEN')
Property.GD_EMAIL = datastore_v3_pb2.Property.Meaning.Value('GD_EMAIL')
Property.GEORSS_POINT = datastore_v3_pb2.Property.Meaning.Value('GEORSS_POINT')
Property.GD_IM = datastore_v3_pb2.Property.Meaning.Value('GD_IM')
Property.GD_PHONENUMBER = datastore_v3_pb2.Property.Meaning.Value('GD_PHONENUMBER')
Property.GD_POSTALADDRESS = datastore_v3_pb2.Property.Meaning.Value('GD_POSTALADDRESS')
Property.GD_RATING = datastore_v3_pb2.Property.Meaning.Value('GD_RATING')
Property.BLOBKEY = datastore_v3_pb2.Property.Meaning.Value('BLOBKEY')
Property.ENTITY_PROTO = datastore_v3_pb2.Property.Meaning.Value('ENTITY_PROTO')
Property.INDEX_VALUE = datastore_v3_pb2.Property.Meaning.Value('INDEX_VALUE')
Property.set_name = lambda self, value: setattr(self,'name', value)
Property.has_name = lambda self: self.HasField('name')
Property.clear_name = lambda self: self.ClearField('name')
Property.set_searchable = lambda self, value: setattr(self,'searchable', value)
Property.has_searchable = lambda self: self.HasField('searchable')
Property.clear_searchable = lambda self: self.ClearField('searchable')
Property.mutable_value = lambda self: getattr(self,'value')
Property.has_value = lambda self: self.HasField('value')
Property.clear_value = lambda self: self.ClearField('value')
PropertyValue = datastore_v3_pb2.PropertyValue
PropertyValue.Encode = PropertyValue.SerializeToString
PropertyValue.booleanvalue = lambda self: getattr(self,'booleanValue')
PropertyValue.set_booleanvalue = lambda self, value: setattr(self,'booleanValue', value)
PropertyValue.has_booleanvalue = lambda self: self.HasField('booleanValue')
PropertyValue.clear_booleanvalue = lambda self: self.ClearField('booleanValue')
PropertyValue.doublevalue = lambda self: getattr(self,'doubleValue')
PropertyValue.set_doublevalue = lambda self, value: setattr(self,'doubleValue', value)
PropertyValue.has_doublevalue = lambda self: self.HasField('doubleValue')
PropertyValue.clear_doublevalue = lambda self: self.ClearField('doubleValue')
PropertyValue.int64value = lambda self: getattr(self,'int64Value')
PropertyValue.set_int64value = lambda self, value: setattr(self,'int64Value', value)
PropertyValue.has_int64value = lambda self: self.HasField('int64Value')
PropertyValue.clear_int64value = lambda self: self.ClearField('int64Value')
PropertyValue.mutable_pointvalue = lambda self: getattr(self,'pointvalue')
PropertyValue.has_pointvalue = lambda self: self.HasField('pointvalue')
PropertyValue.clear_pointvalue = lambda self: self.ClearField('pointvalue')
PropertyValue.mutable_referencevalue = lambda self: getattr(self,'referencevalue')
PropertyValue.has_referencevalue = lambda self: self.HasField('referencevalue')
PropertyValue.clear_referencevalue = lambda self: self.ClearField('referencevalue')
PropertyValue.stringvalue = lambda self: getattr(self,'stringValue')
PropertyValue.set_stringvalue = lambda self, value: setattr(self,'stringValue', value)
PropertyValue.has_stringvalue = lambda self: self.HasField('stringValue')
PropertyValue.clear_stringvalue = lambda self: self.ClearField('stringValue')
PropertyValue.mutable_uservalue = lambda self: getattr(self,'uservalue')
PropertyValue.has_uservalue = lambda self: self.HasField('uservalue')
PropertyValue.clear_uservalue = lambda self: self.ClearField('uservalue')
PropertyValue_PointValue = datastore_v3_pb2.PropertyValue.PointValue
PropertyValue_PointValue.Encode = PropertyValue_PointValue.SerializeToString
PropertyValue_PointValue.set_x = lambda self, value: setattr(self,'x', value)
PropertyValue_PointValue.has_x = lambda self: self.HasField('x')
PropertyValue_PointValue.clear_x = lambda self: self.ClearField('x')
PropertyValue_PointValue.set_y = lambda self, value: setattr(self,'y', value)
PropertyValue_PointValue.has_y = lambda self: self.HasField('y')
PropertyValue_PointValue.clear_y = lambda self: self.ClearField('y')
PropertyValue_ReferenceValue = datastore_v3_pb2.PropertyValue.ReferenceValue
PropertyValue_ReferenceValue.Encode = PropertyValue_ReferenceValue.SerializeToString
PropertyValue_ReferenceValue.set_app = lambda self, value: setattr(self,'app', value)
PropertyValue_ReferenceValue.has_app = lambda self: self.HasField('app')
PropertyValue_ReferenceValue.clear_app = lambda self: self.ClearField('app')
PropertyValue_ReferenceValue.set_name_space = lambda self, value: setattr(self,'name_space', value)
PropertyValue_ReferenceValue.has_name_space = lambda self: self.HasField('name_space')
PropertyValue_ReferenceValue.clear_name_space = lambda self: self.ClearField('name_space')
PropertyValue_ReferenceValue.pathelement_size = lambda self: len(getattr(self,'pathelement'))
PropertyValue_ReferenceValue.pathelement_list = lambda self: getattr(self,'pathelement')
PropertyValue_ReferenceValue.mutable_pathelement = lambda self: getattr(self,'pathelement')
PropertyValue_ReferenceValue.add_pathelement = lambda self: getattr(self,'pathelement').add()
PropertyValue_ReferenceValue.has_pathelement = lambda self: self.HasField('pathelement')
PropertyValue_ReferenceValue.clear_pathelement = lambda self: self.ClearField('pathelement')
PropertyValue_ReferenceValuePathElement = datastore_v3_pb2.PropertyValue.ReferenceValue.PathElement
PropertyValue_ReferenceValuePathElement.Encode = PropertyValue_ReferenceValuePathElement.SerializeToString
PropertyValue_ReferenceValuePathElement.set_id = lambda self, value: setattr(self,'id', value)
PropertyValue_ReferenceValuePathElement.has_id = lambda self: self.HasField('id')
PropertyValue_ReferenceValuePathElement.clear_id = lambda self: self.ClearField('id')
PropertyValue_ReferenceValuePathElement.set_name = lambda self, value: setattr(self,'name', value)
PropertyValue_ReferenceValuePathElement.has_name = lambda self: self.HasField('name')
PropertyValue_ReferenceValuePathElement.clear_name = lambda self: self.ClearField('name')
PropertyValue_ReferenceValuePathElement.set_type = lambda self, value: setattr(self,'type', value)
PropertyValue_ReferenceValuePathElement.has_type = lambda self: self.HasField('type')
PropertyValue_ReferenceValuePathElement.clear_type = lambda self: self.ClearField('type')
PropertyValue_UserValue = datastore_v3_pb2.PropertyValue.UserValue
PropertyValue_UserValue.Encode = PropertyValue_UserValue.SerializeToString
PropertyValue_UserValue.set_auth_domain = lambda self, value: setattr(self,'auth_domain', value)
PropertyValue_UserValue.has_auth_domain = lambda self: self.HasField('auth_domain')
PropertyValue_UserValue.clear_auth_domain = lambda self: self.ClearField('auth_domain')
PropertyValue_UserValue.set_email = lambda self, value: setattr(self,'email', value)
PropertyValue_UserValue.has_email = lambda self: self.HasField('email')
PropertyValue_UserValue.clear_email = lambda self: self.ClearField('email')
PropertyValue_UserValue.set_federated_identity = lambda self, value: setattr(self,'federated_identity', value)
PropertyValue_UserValue.has_federated_identity = lambda self: self.HasField('federated_identity')
PropertyValue_UserValue.clear_federated_identity = lambda self: self.ClearField('federated_identity')
PropertyValue_UserValue.set_federated_provider = lambda self, value: setattr(self,'federated_provider', value)
PropertyValue_UserValue.has_federated_provider = lambda self: self.HasField('federated_provider')
PropertyValue_UserValue.clear_federated_provider = lambda self: self.ClearField('federated_provider')
PropertyValue_UserValue.set_nickname = lambda self, value: setattr(self,'nickname', value)
PropertyValue_UserValue.has_nickname = lambda self: self.HasField('nickname')
PropertyValue_UserValue.clear_nickname = lambda self: self.ClearField('nickname')
PutRequest = datastore_v3_pb2.PutRequest
PutRequest.Encode = PutRequest.SerializeToString
PutRequest.set_auto_id_policy = lambda self, value: setattr(self,'auto_id_policy', value)
PutRequest.has_auto_id_policy = lambda self: self.HasField('auto_id_policy')
PutRequest.clear_auto_id_policy = lambda self: self.ClearField('auto_id_policy')
PutRequest.CURRENT = datastore_v3_pb2.PutRequest.AutoIdPolicy.Value('CURRENT')
PutRequest.SEQUENTIAL = datastore_v3_pb2.PutRequest.AutoIdPolicy.Value('SEQUENTIAL')
PutRequest.composite_index_size = lambda self: len(getattr(self,'composite_index'))
PutRequest.composite_index_list = lambda self: getattr(self,'composite_index')
PutRequest.mutable_composite_index = lambda self: getattr(self,'composite_index')
PutRequest.add_composite_index = lambda self: getattr(self,'composite_index').add()
PutRequest.has_composite_index = lambda self: self.HasField('composite_index')
PutRequest.clear_composite_index = lambda self: self.ClearField('composite_index')
PutRequest.entity_size = lambda self: len(getattr(self,'entity'))
PutRequest.entity_list = lambda self: getattr(self,'entity')
PutRequest.mutable_entity = lambda self: getattr(self,'entity')
PutRequest.add_entity = lambda self: getattr(self,'entity').add()
PutRequest.has_entity = lambda self: self.HasField('entity')
PutRequest.clear_entity = lambda self: self.ClearField('entity')
PutRequest.set_force = lambda self, value: setattr(self,'force', value)
PutRequest.has_force = lambda self: self.HasField('force')
PutRequest.clear_force = lambda self: self.ClearField('force')
PutRequest.mutable_header = lambda self: getattr(self,'header')
PutRequest.has_header = lambda self: self.HasField('header')
PutRequest.clear_header = lambda self: self.ClearField('header')
PutRequest.set_mark_changes = lambda self, value: setattr(self,'mark_changes', value)
PutRequest.has_mark_changes = lambda self: self.HasField('mark_changes')
PutRequest.clear_mark_changes = lambda self: self.ClearField('mark_changes')
PutRequest.snapshot_size = lambda self: len(getattr(self,'snapshot'))
PutRequest.snapshot_list = lambda self: getattr(self,'snapshot')
PutRequest.mutable_snapshot = lambda self: getattr(self,'snapshot')
PutRequest.add_snapshot = lambda self: getattr(self,'snapshot').add()
PutRequest.has_snapshot = lambda self: self.HasField('snapshot')
PutRequest.clear_snapshot = lambda self: self.ClearField('snapshot')
PutRequest.mutable_transaction = lambda self: getattr(self,'transaction')
PutRequest.has_transaction = lambda self: self.HasField('transaction')
PutRequest.clear_transaction = lambda self: self.ClearField('transaction')
PutRequest.set_trusted = lambda self, value: setattr(self,'trusted', value)
PutRequest.has_trusted = lambda self: self.HasField('trusted')
PutRequest.clear_trusted = lambda self: self.ClearField('trusted')
PutResponse = datastore_v3_pb2.PutResponse
PutResponse.Encode = PutResponse.SerializeToString
PutResponse.mutable_cost = lambda self: getattr(self,'cost')
PutResponse.has_cost = lambda self: self.HasField('cost')
PutResponse.clear_cost = lambda self: self.ClearField('cost')
PutResponse.key_size = lambda self: len(getattr(self,'key'))
PutResponse.key_list = lambda self: getattr(self,'key')
PutResponse.mutable_key = lambda self: getattr(self,'key')
PutResponse.add_key = lambda self: getattr(self,'key').add()
PutResponse.has_key = lambda self: self.HasField('key')
PutResponse.clear_key = lambda self: self.ClearField('key')
PutResponse.version_size = lambda self: len(getattr(self,'version'))
PutResponse.version_list = lambda self: getattr(self,'version')
PutResponse.mutable_version = lambda self: getattr(self,'version')
PutResponse.add_version = lambda self, value: getattr(self,'version').append(value)
PutResponse.has_version = lambda self: self.HasField('version')
PutResponse.clear_version = lambda self: self.ClearField('version')
Query = datastore_v3_pb2.Query
Query.Encode = Query.SerializeToString
Query.mutable_ancestor = lambda self: getattr(self,'ancestor')
Query.has_ancestor = lambda self: self.HasField('ancestor')
Query.clear_ancestor = lambda self: self.ClearField('ancestor')
Query.set_app = lambda self, value: setattr(self,'app', value)
Query.has_app = lambda self: self.HasField('app')
Query.clear_app = lambda self: self.ClearField('app')
Query.mutable_compiled_cursor = lambda self: getattr(self,'compiled_cursor')
Query.has_compiled_cursor = lambda self: self.HasField('compiled_cursor')
Query.clear_compiled_cursor = lambda self: self.ClearField('compiled_cursor')
Query.set_compile = lambda self, value: setattr(self,'compile', value)
Query.has_compile = lambda self: self.HasField('compile')
Query.clear_compile = lambda self: self.ClearField('compile')
Query.composite_index_size = lambda self: len(getattr(self,'composite_index'))
Query.composite_index_list = lambda self: getattr(self,'composite_index')
Query.mutable_composite_index = lambda self: getattr(self,'composite_index')
Query.add_composite_index = lambda self: getattr(self,'composite_index').add()
Query.has_composite_index = lambda self: self.HasField('composite_index')
Query.clear_composite_index = lambda self: self.ClearField('composite_index')
Query.set_count = lambda self, value: setattr(self,'count', value)
Query.has_count = lambda self: self.HasField('count')
Query.clear_count = lambda self: self.ClearField('count')
Query.set_distinct = lambda self, value: setattr(self,'distinct', value)
Query.has_distinct = lambda self: self.HasField('distinct')
Query.clear_distinct = lambda self: self.ClearField('distinct')
Query.mutable_end_compiled_cursor = lambda self: getattr(self,'end_compiled_cursor')
Query.has_end_compiled_cursor = lambda self: self.HasField('end_compiled_cursor')
Query.clear_end_compiled_cursor = lambda self: self.ClearField('end_compiled_cursor')
Query.set_failover_ms = lambda self, value: setattr(self,'failover_ms', value)
Query.has_failover_ms = lambda self: self.HasField('failover_ms')
Query.clear_failover_ms = lambda self: self.ClearField('failover_ms')
Query.filter_size = lambda self: len(getattr(self,'filter'))
Query.filter_list = lambda self: getattr(self,'filter')
Query.mutable_filter = lambda self: getattr(self,'filter')
Query.add_filter = lambda self: getattr(self,'filter').add()
Query.has_filter = lambda self: self.HasField('filter')
Query.clear_filter = lambda self: self.ClearField('filter')
Query.group_by_property_name_size = lambda self: len(getattr(self,'group_by_property_name'))
Query.group_by_property_name_list = lambda self: getattr(self,'group_by_property_name')
Query.mutable_group_by_property_name = lambda self: getattr(self,'group_by_property_name')
Query.add_group_by_property_name = lambda self, value: getattr(self,'group_by_property_name').append(value)
Query.has_group_by_property_name = lambda self: self.HasField('group_by_property_name')
Query.clear_group_by_property_name = lambda self: self.ClearField('group_by_property_name')
Query.mutable_header = lambda self: getattr(self,'header')
Query.has_header = lambda self: self.HasField('header')
Query.clear_header = lambda self: self.ClearField('header')
Query.set_hint = lambda self, value: setattr(self,'hint', value)
Query.has_hint = lambda self: self.HasField('hint')
Query.clear_hint = lambda self: self.ClearField('hint')
Query.ORDER_FIRST = datastore_v3_pb2.Query.Hint.Value('ORDER_FIRST')
Query.ANCESTOR_FIRST = datastore_v3_pb2.Query.Hint.Value('ANCESTOR_FIRST')
Query.FILTER_FIRST = datastore_v3_pb2.Query.Hint.Value('FILTER_FIRST')
Query.set_keys_only = lambda self, value: setattr(self,'keys_only', value)
Query.has_keys_only = lambda self: self.HasField('keys_only')
Query.clear_keys_only = lambda self: self.ClearField('keys_only')
Query.set_kind = lambda self, value: setattr(self,'kind', value)
Query.has_kind = lambda self: self.HasField('kind')
Query.clear_kind = lambda self: self.ClearField('kind')
Query.set_limit = lambda self, value: setattr(self,'limit', value)
Query.has_limit = lambda self: self.HasField('limit')
Query.clear_limit = lambda self: self.ClearField('limit')
Query.set_min_safe_time_seconds = lambda self, value: setattr(self,'min_safe_time_seconds', value)
Query.has_min_safe_time_seconds = lambda self: self.HasField('min_safe_time_seconds')
Query.clear_min_safe_time_seconds = lambda self: self.ClearField('min_safe_time_seconds')
Query.set_name_space = lambda self, value: setattr(self,'name_space', value)
Query.has_name_space = lambda self: self.HasField('name_space')
Query.clear_name_space = lambda self: self.ClearField('name_space')
Query.set_offset = lambda self, value: setattr(self,'offset', value)
Query.has_offset = lambda self: self.HasField('offset')
Query.clear_offset = lambda self: self.ClearField('offset')
Query.order_size = lambda self: len(getattr(self,'order'))
Query.order_list = lambda self: getattr(self,'order')
Query.mutable_order = lambda self: getattr(self,'order')
Query.add_order = lambda self: getattr(self,'order').add()
Query.has_order = lambda self: self.HasField('order')
Query.clear_order = lambda self: self.ClearField('order')
Query.set_persist_offset = lambda self, value: setattr(self,'persist_offset', value)
Query.has_persist_offset = lambda self: self.HasField('persist_offset')
Query.clear_persist_offset = lambda self: self.ClearField('persist_offset')
Query.property_name_size = lambda self: len(getattr(self,'property_name'))
Query.property_name_list = lambda self: getattr(self,'property_name')
Query.mutable_property_name = lambda self: getattr(self,'property_name')
Query.add_property_name = lambda self, value: getattr(self,'property_name').append(value)
Query.has_property_name = lambda self: self.HasField('property_name')
Query.clear_property_name = lambda self: self.ClearField('property_name')
Query.set_require_perfect_plan = lambda self, value: setattr(self,'require_perfect_plan', value)
Query.has_require_perfect_plan = lambda self: self.HasField('require_perfect_plan')
Query.clear_require_perfect_plan = lambda self: self.ClearField('require_perfect_plan')
Query.safe_replica_name_size = lambda self: len(getattr(self,'safe_replica_name'))
Query.safe_replica_name_list = lambda self: getattr(self,'safe_replica_name')
Query.mutable_safe_replica_name = lambda self: getattr(self,'safe_replica_name')
Query.add_safe_replica_name = lambda self, value: getattr(self,'safe_replica_name').append(value)
Query.has_safe_replica_name = lambda self: self.HasField('safe_replica_name')
Query.clear_safe_replica_name = lambda self: self.ClearField('safe_replica_name')
Query.set_search_query = lambda self, value: setattr(self,'search_query', value)
Query.has_search_query = lambda self: self.HasField('search_query')
Query.clear_search_query = lambda self: self.ClearField('search_query')
Query.set_strong = lambda self, value: setattr(self,'strong', value)
Query.has_strong = lambda self: self.HasField('strong')
Query.clear_strong = lambda self: self.ClearField('strong')
Query.mutable_transaction = lambda self: getattr(self,'transaction')
Query.has_transaction = lambda self: self.HasField('transaction')
Query.clear_transaction = lambda self: self.ClearField('transaction')
Query_Filter = datastore_v3_pb2.Query.Filter
Query_Filter.Encode = Query_Filter.SerializeToString
Query_Filter.set_op = lambda self, value: setattr(self,'op', value)
Query_Filter.has_op = lambda self: self.HasField('op')
Query_Filter.clear_op = lambda self: self.ClearField('op')
Query_Filter.LESS_THAN = datastore_v3_pb2.Query.Filter.Operator.Value('LESS_THAN')
Query_Filter.LESS_THAN_OR_EQUAL = datastore_v3_pb2.Query.Filter.Operator.Value('LESS_THAN_OR_EQUAL')
Query_Filter.GREATER_THAN = datastore_v3_pb2.Query.Filter.Operator.Value('GREATER_THAN')
Query_Filter.GREATER_THAN_OR_EQUAL = datastore_v3_pb2.Query.Filter.Operator.Value('GREATER_THAN_OR_EQUAL')
Query_Filter.EQUAL = datastore_v3_pb2.Query.Filter.Operator.Value('EQUAL')
Query_Filter.IN = datastore_v3_pb2.Query.Filter.Operator.Value('IN')
Query_Filter.EXISTS = datastore_v3_pb2.Query.Filter.Operator.Value('EXISTS')
Query_Filter.property_size = lambda self: len(getattr(self,'property'))
Query_Filter.property_list = lambda self: getattr(self,'property')
Query_Filter.mutable_property = lambda self: getattr(self,'property')
Query_Filter.add_property = lambda self: getattr(self,'property').add()
Query_Filter.has_property = lambda self: self.HasField('property')
Query_Filter.clear_property = lambda self: self.ClearField('property')
Query_Order = datastore_v3_pb2.Query.Order
Query_Order.Encode = Query_Order.SerializeToString
Query_Order.set_direction = lambda self, value: setattr(self,'direction', value)
Query_Order.has_direction = lambda self: self.HasField('direction')
Query_Order.clear_direction = lambda self: self.ClearField('direction')
Query_Order.ASCENDING = datastore_v3_pb2.Query.Order.Direction.Value('ASCENDING')
Query_Order.DESCENDING = datastore_v3_pb2.Query.Order.Direction.Value('DESCENDING')
Query_Order.set_property = lambda self, value: setattr(self,'property', value)
Query_Order.has_property = lambda self: self.HasField('property')
Query_Order.clear_property = lambda self: self.ClearField('property')
QueryResult = datastore_v3_pb2.QueryResult
QueryResult.Encode = QueryResult.SerializeToString
QueryResult.mutable_compiled_cursor = lambda self: getattr(self,'compiled_cursor')
QueryResult.has_compiled_cursor = lambda self: self.HasField('compiled_cursor')
QueryResult.clear_compiled_cursor = lambda self: self.ClearField('compiled_cursor')
QueryResult.mutable_compiled_query = lambda self: getattr(self,'compiled_query')
QueryResult.has_compiled_query = lambda self: self.HasField('compiled_query')
QueryResult.clear_compiled_query = lambda self: self.ClearField('compiled_query')
QueryResult.mutable_cursor = lambda self: getattr(self,'cursor')
QueryResult.has_cursor = lambda self: self.HasField('cursor')
QueryResult.clear_cursor = lambda self: self.ClearField('cursor')
QueryResult.index_size = lambda self: len(getattr(self,'index'))
QueryResult.index_list = lambda self: getattr(self,'index')
QueryResult.mutable_index = lambda self: getattr(self,'index')
QueryResult.add_index = lambda self: getattr(self,'index').add()
QueryResult.has_index = lambda self: self.HasField('index')
QueryResult.clear_index = lambda self: self.ClearField('index')
QueryResult.set_index_only = lambda self, value: setattr(self,'index_only', value)
QueryResult.has_index_only = lambda self: self.HasField('index_only')
QueryResult.clear_index_only = lambda self: self.ClearField('index_only')
QueryResult.set_keys_only = lambda self, value: setattr(self,'keys_only', value)
QueryResult.has_keys_only = lambda self: self.HasField('keys_only')
QueryResult.clear_keys_only = lambda self: self.ClearField('keys_only')
QueryResult.set_more_results = lambda self, value: setattr(self,'more_results', value)
QueryResult.has_more_results = lambda self: self.HasField('more_results')
QueryResult.clear_more_results = lambda self: self.ClearField('more_results')
QueryResult.result_size = lambda self: len(getattr(self,'result'))
QueryResult.result_list = lambda self: getattr(self,'result')
QueryResult.mutable_result = lambda self: getattr(self,'result')
QueryResult.add_result = lambda self: getattr(self,'result').add()
QueryResult.has_result = lambda self: self.HasField('result')
QueryResult.clear_result = lambda self: self.ClearField('result')
QueryResult.set_skipped_results = lambda self, value: setattr(self,'skipped_results', value)
QueryResult.has_skipped_results = lambda self: self.HasField('skipped_results')
QueryResult.clear_skipped_results = lambda self: self.ClearField('skipped_results')
QueryResult.set_small_ops = lambda self, value: setattr(self,'small_ops', value)
QueryResult.has_small_ops = lambda self: self.HasField('small_ops')
QueryResult.clear_small_ops = lambda self: self.ClearField('small_ops')
QueryResult.version_size = lambda self: len(getattr(self,'version'))
QueryResult.version_list = lambda self: getattr(self,'version')
QueryResult.mutable_version = lambda self: getattr(self,'version')
QueryResult.add_version = lambda self, value: getattr(self,'version').append(value)
QueryResult.has_version = lambda self: self.HasField('version')
QueryResult.clear_version = lambda self: self.ClearField('version')
Reference = datastore_v3_pb2.Reference
Reference.Encode = Reference.SerializeToString
Reference.set_app = lambda self, value: setattr(self,'app', value)
Reference.has_app = lambda self: self.HasField('app')
Reference.clear_app = lambda self: self.ClearField('app')
Reference.set_name_space = lambda self, value: setattr(self,'name_space', value)
Reference.has_name_space = lambda self: self.HasField('name_space')
Reference.clear_name_space = lambda self: self.ClearField('name_space')
Reference.mutable_path = lambda self: getattr(self,'path')
Reference.has_path = lambda self: self.HasField('path')
Reference.clear_path = lambda self: self.ClearField('path')
Snapshot = datastore_v3_pb2.Snapshot
Snapshot.Encode = Snapshot.SerializeToString
Snapshot.INACTIVE = datastore_v3_pb2.Snapshot.Status.Value('INACTIVE')
Snapshot.ACTIVE = datastore_v3_pb2.Snapshot.Status.Value('ACTIVE')
Snapshot.set_ts = lambda self, value: setattr(self,'ts', value)
Snapshot.has_ts = lambda self: self.HasField('ts')
Snapshot.clear_ts = lambda self: self.ClearField('ts')
TouchRequest = datastore_v3_pb2.TouchRequest
TouchRequest.Encode = TouchRequest.SerializeToString
TouchRequest.composite_index_size = lambda self: len(getattr(self,'composite_index'))
TouchRequest.composite_index_list = lambda self: getattr(self,'composite_index')
TouchRequest.mutable_composite_index = lambda self: getattr(self,'composite_index')
TouchRequest.add_composite_index = lambda self: getattr(self,'composite_index').add()
TouchRequest.has_composite_index = lambda self: self.HasField('composite_index')
TouchRequest.clear_composite_index = lambda self: self.ClearField('composite_index')
TouchRequest.set_force = lambda self, value: setattr(self,'force', value)
TouchRequest.has_force = lambda self: self.HasField('force')
TouchRequest.clear_force = lambda self: self.ClearField('force')
TouchRequest.mutable_header = lambda self: getattr(self,'header')
TouchRequest.has_header = lambda self: self.HasField('header')
TouchRequest.clear_header = lambda self: self.ClearField('header')
TouchRequest.key_size = lambda self: len(getattr(self,'key'))
TouchRequest.key_list = lambda self: getattr(self,'key')
TouchRequest.mutable_key = lambda self: getattr(self,'key')
TouchRequest.add_key = lambda self: getattr(self,'key').add()
TouchRequest.has_key = lambda self: self.HasField('key')
TouchRequest.clear_key = lambda self: self.ClearField('key')
TouchRequest.snapshot_size = lambda self: len(getattr(self,'snapshot'))
TouchRequest.snapshot_list = lambda self: getattr(self,'snapshot')
TouchRequest.mutable_snapshot = lambda self: getattr(self,'snapshot')
TouchRequest.add_snapshot = lambda self: getattr(self,'snapshot').add()
TouchRequest.has_snapshot = lambda self: self.HasField('snapshot')
TouchRequest.clear_snapshot = lambda self: self.ClearField('snapshot')
TouchResponse = datastore_v3_pb2.TouchResponse
TouchResponse.Encode = TouchResponse.SerializeToString
TouchResponse.mutable_cost = lambda self: getattr(self,'cost')
TouchResponse.has_cost = lambda self: self.HasField('cost')
TouchResponse.clear_cost = lambda self: self.ClearField('cost')
Transaction = datastore_v3_pb2.Transaction
Transaction.Encode = Transaction.SerializeToString
Transaction.set_app = lambda self, value: setattr(self,'app', value)
Transaction.has_app = lambda self: self.HasField('app')
Transaction.clear_app = lambda self: self.ClearField('app')
Transaction.set_handle = lambda self, value: setattr(self,'handle', value)
Transaction.has_handle = lambda self: self.HasField('handle')
Transaction.clear_handle = lambda self: self.ClearField('handle')
Transaction.mutable_header = lambda self: getattr(self,'header')
Transaction.has_header = lambda self: self.HasField('header')
Transaction.clear_header = lambda self: self.ClearField('header')
Transaction.set_mark_changes = lambda self, value: setattr(self,'mark_changes', value)
Transaction.has_mark_changes = lambda self: self.HasField('mark_changes')
Transaction.clear_mark_changes = lambda self: self.ClearField('mark_changes')
User = datastore_v3_pb2.User
User.Encode = User.SerializeToString
User.set_auth_domain = lambda self, value: setattr(self,'auth_domain', value)
User.has_auth_domain = lambda self: self.HasField('auth_domain')
User.clear_auth_domain = lambda self: self.ClearField('auth_domain')
User.set_email = lambda self, value: setattr(self,'email', value)
User.has_email = lambda self: self.HasField('email')
User.clear_email = lambda self: self.ClearField('email')
User.set_federated_identity = lambda self, value: setattr(self,'federated_identity', value)
User.has_federated_identity = lambda self: self.HasField('federated_identity')
User.clear_federated_identity = lambda self: self.ClearField('federated_identity')
User.set_federated_provider = lambda self, value: setattr(self,'federated_provider', value)
User.has_federated_provider = lambda self: self.HasField('federated_provider')
User.clear_federated_provider = lambda self: self.ClearField('federated_provider')
User.set_nickname = lambda self, value: setattr(self,'nickname', value)
User.has_nickname = lambda self: self.HasField('nickname')
User.clear_nickname = lambda self: self.ClearField('nickname')
